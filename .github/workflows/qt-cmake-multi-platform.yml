name: Qt CMake Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            qt_host: 'linux'
            qt_arch: 'linux_gcc_64'
            artifact_name: linux-build
            install_cmd: sudo apt-get install -y patchelf
            deploy_cmd: linuxdeployqt dist/$PRODUCT_NAME -appimage -no-translations -qmldir=qml
            binary_ext: ''
            strip_cmd: strip dist/$PRODUCT_NAME
          - os: macos-latest
            qt_host: 'mac'
            qt_arch: 'clang_64'
            artifact_name: macos-build
            install_cmd: brew install patchelf
            deploy_cmd: macdeployqt dist/$PRODUCT_NAME.app -dmg -no-translations -qmldir=qml
            binary_ext: '.app/Contents/MacOS/$PRODUCT_NAME'
            strip_cmd: strip dist/$PRODUCT_NAME.app/Contents/MacOS/$PRODUCT_NAME
          - os: windows-latest
            qt_host: 'windows'
            qt_arch: 'win64_mingw'
            artifact_name: windows-build
            install_cmd: ''
            deploy_cmd: windeployqt dist/$PRODUCT_NAME.exe
            binary_ext: '.exe'
            strip_cmd: ''

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: ${{ matrix.install_cmd }}

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.3.0
      with:
        version: '6.7.*'
        host: ${{ matrix.qt_host }}
        target: 'desktop'
        arch: ${{ matrix.qt_arch }}
        use-official: true
        aqtversion: '==3.1.19'
        email: ${{ secrets.QTEMAIL }}
        pw: ${{ secrets.QTPASSWD }}

    - name: Set up MinGW (Windows)
      if: runner.os == 'Windows'
      uses: coffeebe4code/setup-mingw@v1-beta-2
      with:
        platform: x64
        version: 11.2.0

    - name: Configure CMake
      shell: bash
      run: |
        mkdir build
        cd build
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake .. -G "MinGW Makefiles" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_BUILD_TYPE=Release
        else
          cmake .. -DCMAKE_BUILD_TYPE=Release
        fi

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config Release

    - name: Create binary package
      shell: bash
      run: |
        mkdir dist
        PRODUCT_NAME="AsulSwiftDevelopKit"
        
        if [ "$RUNNER_OS" == "Windows" ]; then
          cp build/${PRODUCT_NAME}.exe dist/
          cp build/ElaWidgetTools.dll dist/
        elif [ "$RUNNER_OS" == "macOS" ]; then
          cp -r build/${PRODUCT_NAME}.app dist/
        else
          cp build/${PRODUCT_NAME} dist/
        fi
        
        ${{ matrix.strip_cmd }}
        cd dist
        ${{ matrix.deploy_cmd }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/
        retention-days: 7
